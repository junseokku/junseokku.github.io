{
    "componentChunkName": "component---src-templates-post-template-tsx",
    "path": "/202207/26/2022-07-26-JSDeepdive5/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2>19장 - 프로토타입</h2>\n<h3>객체지향 프로그래밍</h3>\n<ul>\n<li><code class=\"language-text\">객체</code> : 속성을 통해 여러 개의 값을 하나의 단위로 구성한 복합적인 자료구조</li>\n<li>상속은 코드 중복을 줄이고 재사용할 수 있다. 객체지향에서 핵심 개념.</li>\n<li>자바스크립트는 프로토타입으로 상속을 구현한다.</li>\n</ul>\n<br>\n<h3>프로토타입 객체</h3>\n<ul>\n<li>함수가 중첩되면 스코프도 계층적인 구조를 갖는다.</li>\n<li>변수를 참조할 때, 해당 스코프에서 시작해 상위 스코프로 이동하며 검색한다.</li>\n<li>이를 <code class=\"language-text\">식별자를 검색하는 규칙</code>이라고 한다.</li>\n</ul>\n<br>\n<h3>함수 레벨 스코프</h3>\n<ul>\n<li><code class=\"language-text\">함수 레벨 스코프</code>는 var 키워드로 선언된 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정하는 특성이다.</li>\n<li>다른 언어에서는 if, for, while과 같은 코드 블록에서도 지역 스코프가 만들어진다.</li>\n<li>ES6에서는 let, const 키워드로 블록 레벨 스코프를 지원한다.</li>\n</ul>\n<h3>렉시컬 스코프</h3>\n<ul>\n<li><code class=\"language-text\">동적 스코프</code> : 함수를 어디서 호출했는지에 따라 상위 스코프 결정</li>\n<li><code class=\"language-text\">정적 스코프</code> : 함수를 어디서 정의했는지에 따라 상위 스코프 결정</li>\n<li>대부분의 프로그래밍 언어는 <code class=\"language-text\">정적 스코프</code> 방법이며, 자바스크립트도 동일하다.</li>\n</ul>\n<br>\n<br>\n<h2>14장 - 전역 변수의 문제점</h2>\n<h3>변수의 생명 주기</h3>\n<ul>\n<li>변수는 생성되고 소멸되는 생명주기가 있다.</li>\n<li>지역 변수의 생명 주기는 함수의 생명 주기와 일치한다.</li>\n<li>하지만 지역 변수가 함수보다 오래 생존하는 경우가 있는데 이는 후에 클로저에서 다룬다.</li>\n<li>호이스팅은 스코프 단위로 동작한다.</li>\n<li>전역 변수의 생명 주기는 전역 객체의 생명 주기와 일치한다.</li>\n</ul>\n<br>\n<h3>전역 변수의 문제점</h3>\n<ul>\n<li>암묵적 결합, 긴 생명 주기, 스코프 체인 상에서 종점에 존재, 네임스페이스 오염</li>\n</ul>\n<br>\n<h3>전역 변수의 사용을 억제하는 방법</h3>\n<ul>\n<li>즉시 실행 함수, 네임스페이스 객체, 모듈 패턴, ES6 모듈</li>\n</ul>\n<br>\n<br>\n<h2>15장 - let, const 키워드와 블록 레벨 스코프</h2>\n<h3>var 키워드로 선언한 변수의 문제점</h3>\n<ul>\n<li>변수 중복 선언 허용, 함수 레벨 스코프, 변수 호이스팅 O</li>\n</ul>\n<br>\n<h3>let 키워드</h3>\n<ul>\n<li>변수 중복 선언 금지, 블록 레벨 스코프, 변수 호이스팅 X</li>\n<li>전역 변수를 선언하면 전역 객체의 프로퍼티가 되지 않는다.</li>\n</ul>\n<br>\n<h3>const 키워드</h3>\n<ul>\n<li>const 키워드로 선언한 변수는 반드시 선언과 동시에 초기화해야한다.</li>\n<li>재할당 금지, 상수(재할당이 금지된 변수)</li>\n</ul>\n<br>\n<h3>var, let, const</h3>\n<ul>\n<li>ES6를 사용한다면 var 키워드는 사용하지 않는다.</li>\n<li>재할당이 필요한 경우에 한정해 let을 사용하며, 변수의 스코프는 최대한 좁게.</li>\n<li>재할당이 필요 없는 경우에 const 키워드를 기본적으로 사용</li>\n</ul>","frontmatter":{"title":"모던 자바스크립트 Deep Dive - 19장, 20정, 21장 요약 정리","summary":"모던 자바스크립트 Deep Dive 챕터 19장 프로토타입, 20장 strict mode, 21장 빌트인 객체를 요약 해봅시다.","date":"2022.07.19.","categories":["JavaScript"]}}}]},"site":{"siteMetadata":{"title":"Jun.Dev","description":"My Blog for record to study","siteUrl":"https://junseokku.github.io"}}},"pageContext":{"slug":"/202207/26/2022-07-26-JSDeepdive5/"}},
    "staticQueryHashes": []}