{
    "componentChunkName": "component---src-templates-post-template-tsx",
    "path": "/202207/09/2022-07-06-JSDeepdive2/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2>9장 - 타입 변환과 단축 평가</h2>\n<h3>타입 변환</h3>\n<ul>\n<li><code class=\"language-text\">타입 변환</code>이란 값의 타입을 변환하는 것.</li>\n<li><code class=\"language-text\">명시적 타입 변환(타입 캐스팅)</code> : 개발자가 의도적으로 값의 타입 변환</li>\n<li><code class=\"language-text\">암묵적 타입 변환(타입 강제 변환)</code> : 자바스크립트 엔진에 의해 암묵적으로 값의 타입 변환</li>\n<li><code class=\"language-text\">암묵적 타입 변환</code>에서 자바스크립트 엔진은 표현식의 문맥상 부합하는 타입으로 자동 변환한다.</li>\n</ul>\n<br>\n<h3>단축 평가</h3>\n<ul>\n<li>표현식을 평가하는 도중에 평가 결과가 확정된 경우 나머지 평가 과정을 생략하는 것.</li>\n</ul>\n<br>\n<h3>옵셔널 체이닝 연산자</h3>\n<ul>\n<li>연산자 <code class=\"language-text\">?.</code>는 좌항의 피연산자가 <code class=\"language-text\">null</code> 또는 <code class=\"language-text\">undefined</code>일 때 <code class=\"language-text\">undefined</code>를 반환하고, 그렇지 않으면 우항의 참조를 이어간다.</li>\n</ul>\n<h3>null 병합 연산자</h3>\n<ul>\n<li>연산자 <code class=\"language-text\">??</code>는 좌항의 피연산자가 <code class=\"language-text\">null</code> 또는 <code class=\"language-text\">undefined</code>일 때 우항의 피연산자를 반환하고, 그렇지 않으면 좌항의 피연산자를 반환한다.</li>\n</ul>\n<br>\n<br>\n<h2>10장 - 객체 리터럴</h2>\n<h3>객체</h3>\n<ul>\n<li><code class=\"language-text\">객체</code>는 0개 이상의 프로퍼티로 구성된 집합이다. 프로퍼티는 <code class=\"language-text\">key</code>와 <code class=\"language-text\">value</code>로 구성된다.</li>\n<li>객체를 생성하는 일반적인 방법은 객체 리터럴을 사용하는 방법이다.</li>\n<li>프로퍼티 키는 식별자 네이밍 규칙을 따르지 않은 이름에는 반드시 따옴표를 사용해야 한다.</li>\n<li>프로퍼티 값이 함수일 경우 <code class=\"language-text\">메서드</code>라고 부른다. <code class=\"language-text\">메서드</code>는 객체에 묶여 있는 함수를 의미한다.</li>\n</ul>\n<br>\n<br>\n<h2>11장 - 원시 값과 객체의 비교</h2>\n<ul>\n<li><code class=\"language-text\">원시 값</code> : 변경 불가능한 값, 변수에는 실제 값 저장, pass by value</li>\n<li><code class=\"language-text\">객체</code> : 변경 가능한 값, 변수에는 참조 값 저장, pass by reference</li>\n</ul>\n<br>\n<br>\n<h2>12장 - 함수</h2>\n<h3>함수</h3>\n<ul>\n<li><code class=\"language-text\">함수</code>는 일련의 과정을 <code class=\"language-text\">문</code>으로 구현하고, <code class=\"language-text\">블록</code>으로 감싸서 하나의 실행 단위로 정의한 것이다.</li>\n<li>함수 정의는 선언문, 표현식, 생성자 함수, 화살표 함수로 할 수 있다.</li>\n<li>매개변수, 반환문이 있을 수 있다.</li>\n</ul>\n<h3>일급 객체</h3>\n<ul>\n<li>자바스크립트의 함수는 <code class=\"language-text\">일급 객체</code>다.</li>\n<li><code class=\"language-text\">일급 객체</code>란 값의 성질을 갖는 객체를 말한다.</li>\n</ul>\n<h3>함수 호이스팅</h3>\n<ul>\n<li>함수 선언문으로 정의한 함수는 함수 호이스팅이 된다.</li>\n<li>함수 호이스팅은 변수 호이스팅과 다르게 런타임 이전시 사용해도 호출이 될 수 있다.(함수 선언식에서)</li>\n<li>함수 표현식에서는 변수 호이스팅처럼 동작한다.</li>\n</ul>\n<h3>함수의 다양한 형태</h3>\n<ul>\n<li>즉시 실행함수 : 정의와 동시에 호출되는 함수</li>\n<li>재귀 함수 : 자기 자신을 호출하는 것</li>\n<li>중첩 함수 : 함수 내부에 정의된 함수</li>\n<li>콜백 함수 : 함수의 매개변수를 통해 다른 함수의 내부로 전달되는 함수</li>\n</ul>","frontmatter":{"title":"모던 자바스크립트 Deep Dive - 9장, 10정, 11장, 12장 요약 정리","summary":"모던 자바스크립트 Deep Dive 챕터 9장 타입 변환과 단축 평가, 10장 객체 리터럴, 11장 원시 값과 객체의 비교, 12장 함수 요약 정리를 해봅시다.","date":"2022.07.09.","categories":["JavaScript"]}}}]},"site":{"siteMetadata":{"title":"Jun.Dev","description":"My Blog for record to study","siteUrl":"https://junseokku.github.io"}}},"pageContext":{"slug":"/202207/09/2022-07-06-JSDeepdive2/"}},
    "staticQueryHashes": []}