{
    "componentChunkName": "component---src-templates-post-template-tsx",
    "path": "/202207/06/2022-07-06-JSDeepdive1/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2>4장 - 변수</h2>\n<h3>변수란?</h3>\n<ul>\n<li>변수란 값의 위치를 가리키는 상징적인 이름이다.</li>\n<li><code class=\"language-text\">변수 이름</code> : 메모리 공간에 저장된 값을 식별할 수 있는 고유한 이름</li>\n<li><code class=\"language-text\">변수 값</code> : 변수에 저장된 값</li>\n<li><code class=\"language-text\">할당</code> : 변수에 값을 저장하는 것</li>\n<li><code class=\"language-text\">참조</code> : 변수에 저장된 값을 읽어 들이는 것</li>\n</ul>\n<br>\n<h3>변수 선언</h3>\n<ul>\n<li>변수 선언이란 변수를 생성하는 것을 말한다.</li>\n<li>변수 선언에는 <code class=\"language-text\">var</code>, <code class=\"language-text\">let</code>, <code class=\"language-text\">const</code> 키워드를 사용한다.</li>\n<li>자바스크립트 엔진에서 변수 선언은 “선언”, “초기화” 단계로 수행된다.\n<code class=\"language-text\">선언 단계</code> : 변수 이름을 등록해서 자바스크립트 엔진에 변수 존재를 알린다.<br>\n<code class=\"language-text\">초기화 단계</code> : 값을 저장하기 위한 메모리 공간을 확보하고 암묵적으로 undefined를 할당해 초기화한다.</li>\n<li>변수 선언은 런타임(소스코드가 실행되는 시점)이 아니라 그 이전 단계에서 먼저 실행된다.</li>\n<li>변수 선언문이 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 <code class=\"language-text\">변수 호이스팅</code>이라 한다.</li>\n<li>값의 <code class=\"language-text\">할당</code>은 런타임에 실행된다.</li>\n</ul>\n<br>\n<h3>식별자 네이밍 규칙</h3>\n<ul>\n<li>식별자란 어떤 값을 구별해서 식별할 수 있는 고유한 이름을 말한다(함수명, 변수명. 클래스명 등등)</li>\n<li>식별자 네이밍 규칙은 다음과 같다.\n<ol>\n<li>특수문자를 제외한 문자, 숫자, <code class=\"language-text\">_</code>, <code class=\"language-text\">$</code>는 포함할 수 있다.</li>\n<li>숫자로 시작할 수 없다.</li>\n<li>예약어는 식별자로 사용할 수 없다.</li>\n<li>네이밍 컨벤션(<code class=\"language-text\">camelCase</code>, <code class=\"language-text\">snake_case</code>, <code class=\"language-text\">PascalCase</code>)을 사용한다. 자바스크립트 에서는 일반적으로 <code class=\"language-text\">camelCase</code> 사용한다.</li>\n</ol>\n</li>\n</ul>\n<br>\n<br>\n<h2>5장 - 표현식과 문</h2>\n<ul>\n<li>잘 봐야할 용어 : <code class=\"language-text\">값</code>, <code class=\"language-text\">표현식</code>, <code class=\"language-text\">평가</code>, <code class=\"language-text\">리터럴</code>, <code class=\"language-text\">문</code></li>\n</ul>\n<h3>값과 리터럴</h3>\n<ul>\n<li><code class=\"language-text\">값</code>은 <code class=\"language-text\">표현식</code>이 <code class=\"language-text\">평가</code>되어 생성된 결과를 말한다.</li>\n<li>값을 생성하는 기본적인 방법은 리터럴을 사용하는 것이다.</li>\n<li><code class=\"language-text\">리터럴</code>은 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법을 말한다.</li>\n<li>정수, 문자열, 불리언, 객체, 함수, 정규표현식 등 다양한 종류의 리터럴이 있다.</li>\n</ul>\n<br>\n<h3>표현식과 문</h3>\n<ul>\n<li><code class=\"language-text\">표현식</code>은 값으로 <code class=\"language-text\">평가</code>될 수 있는 <code class=\"language-text\">문</code>이다.</li>\n<li><code class=\"language-text\">표현식</code>은 <code class=\"language-text\">평가</code>되면 <code class=\"language-text\">값</code> or <code class=\"language-text\">참조</code></li>\n<li><code class=\"language-text\">문</code>은 프로그램을 구성하는 기본 단위이자 최소 실행 단위이다.</li>\n<li><code class=\"language-text\">문</code>은 여러 토큰(더 이상  나눌 수 없는 코드)으로 구성되며, 토큰으로 키워드, 식별자, 연산자, 세미콜론 등등 있다.</li>\n</ul>\n<br>\n<h3>세미콜론 자동 삽입 기능</h3>\n<ul>\n<li><code class=\"language-text\">;</code>은 문의 종료를 나타내며 생략가능하다.</li>\n<li>자바스크립트 엔진은 세미콜론 자동 삽입 기능이 있다.</li>\n<li>예측과 일치하게 동작하지 않을 수 있으니 ESLint와 같은 정적 분석 도구 사용 권장.</li>\n</ul>\n<br>\n<br>\n<h2>6장 - 데이터 타입</h2>\n<h3>데이터 타입</h3>\n<ul>\n<li>자바스크립트에서 모든 값은 데이터 타입을 갖는다.</li>\n<li>데이터 타입은 7개이다.</li>\n<li>데이터 타입은 원시 타입, 객체 타입으로 분류될 수 있다.\n<ol>\n<li>숫자 타입 : 정수, 실수 구분 x</li>\n<li>문자열 타입 : 문자열, ES6부터 <code class=\"language-text\">템플릿 리터럴</code> 도입</li>\n<li>불리언 타입 : <code class=\"language-text\">true</code> or <code class=\"language-text\">false</code></li>\n<li>undefined 타입 : var로 선언된 변수에 암묵적으로 할당되는 값</li>\n<li>null 타입 : 값이 없음을 의도적 명시</li>\n<li>심벌 타입 : 이름이 충돌할 위험이 없는 객체의 유일한 프로퍼티 키를 만들기 위해 사용</li>\n<li>객체 타입 : 객체, 함수, 배열 등</li>\n</ol>\n<ul>\n<li>1~6은 원시 타입, 7은 객체 타입. 두 타입은 근본적으로 다르다 -> 이에 대한 내용은 11장</li>\n</ul>\n</li>\n<li>템플릿 리터럴에서는 문자열 그대로 적용되며, 표현식 삽입 가능.</li>\n</ul>\n<br>\n<h3>데이터 타입이 필요한 이유</h3>\n<ul>\n<li>메모리 확보에서 공간의 크기를 결정해야하기 때문</li>\n<li>값을 참조할 때, 공간의 크기를 결정해야하기 때문</li>\n<li>값을 읽을 때, 2진수를 어떻게 해석할지 결정해야하기 때문</li>\n</ul>\n<br>\n<h3>동적 타입 언어와 정적 타입 언어</h3>\n<ul>\n<li>동적 타입 언어(<code class=\"language-text\">C</code>, <code class=\"language-text\">C++</code>, <code class=\"language-text\">Java</code> 등등)은 컴파일 시점에 타입 체크를 하고 통과하지 못하면 에러를 발생시킨다.</li>\n<li>정적 타입 언어는 자바스크립트가 있고, 할당에 의해 타입이 결정(타입 추론)되며, 타입은 동적으로 변할 수 있다.</li>\n</ul>\n<br>\n<br>\n<h2>7장 - 연산자</h2>\n<ul>\n<li>산술 연산자, 할당 연산자, 비교 연산자, 삼항 조건 연산자, 논리 연산자</li>\n<li>쉼표 연산자, 그룹 연산자, typeof 연산자, 지수 연산자 등</li>\n<li>그 외로 <code class=\"language-text\">옵셔널 체이닝 연산자</code>, <code class=\"language-text\">null 병합 연산자</code>와 같은 것들이 있는데 해당 주제를 소개하는 장에 자세히 소개.</li>\n<li>다른 코드에 영향을 주면 연산자의 부수 효과가 있다고 한다.</li>\n<li>연산자는 <code class=\"language-text\">연산자의 우선순위</code>가 높을수록 먼저 실행된다.</li>\n<li>연산자는 <code class=\"language-text\">연산자 결합 순서</code>에 의해 좌항 혹은 우항부터 평가를 수행한다.</li>\n</ul>\n<br>\n<br>\n<h2>8장 - 제어문</h2>\n<h3>조건문</h3>\n<ul>\n<li>주어진 조건식의 평가에 따라 <code class=\"language-text\">블록(블록문)</code>의 실행을 결정.</li>\n<li><code class=\"language-text\">블록</code>은 0개 이상의 문을 중괄호로 묶은 것.</li>\n<li><code class=\"language-text\">if ... else</code>, <code class=\"language-text\">switch</code></li>\n</ul>\n<br>\n<h3>반복문</h3>\n<ul>\n<li>조건식이 거짓으로 평가될 때까지 코드 블록을 반복 실행</li>\n<li><code class=\"language-text\">for</code>, <code class=\"language-text\">while</code>, <code class=\"language-text\">do ... while</code></li>\n</ul>\n<br>\n<h3>그 외</h3>\n<ul>\n<li><code class=\"language-text\">break</code>, <code class=\"language-text\">continue</code></li>\n</ul>","frontmatter":{"title":"모던 자바스크립트 Deep Dive - 4장, 5정, 6장, 7장, 8장 요약 정리","summary":"모던 자바스크립트 Deep Dive 챕터 4장 변수, 5장 표현식과 문, 6장 데이터 타입, 7장 연산자, 8장 제어문 요약 정리를 해봅시다.","date":"2022.07.06.","categories":["JavaScript"]}}}]},"site":{"siteMetadata":{"title":"Jun.Dev","description":"My Blog for record to study","siteUrl":"https://junseokku.github.io"}}},"pageContext":{"slug":"/202207/06/2022-07-06-JSDeepdive1/"}},
    "staticQueryHashes": []}